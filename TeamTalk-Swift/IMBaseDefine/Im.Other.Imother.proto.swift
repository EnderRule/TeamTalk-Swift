/// Generated by the Protocol Buffers 3.3.2 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.22
/// Source file "IM.Other.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers

public extension Im {
    public struct Other {}
}

public extension Im.Other {
    public struct ImotherRoot {
        public static let `default` = ImotherRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    ///cmd id:  		0x0701
    final public class ImheartBeat : GeneratedMessage {
        public typealias BuilderType = Im.Other.ImheartBeat.Builder

        public static func == (lhs: Im.Other.ImheartBeat, rhs: Im.Other.ImheartBeat) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Im.Other.ImheartBeat.Builder {
            return Im.Other.ImheartBeat.classBuilder() as! Im.Other.ImheartBeat.Builder
        }
        public func getBuilder() -> Im.Other.ImheartBeat.Builder {
            return classBuilder() as! Im.Other.ImheartBeat.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Im.Other.ImheartBeat.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Im.Other.ImheartBeat.Builder()
        }
        public func toBuilder() throws -> Im.Other.ImheartBeat.Builder {
            return try Im.Other.ImheartBeat.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Im.Other.ImheartBeat) throws -> Im.Other.ImheartBeat.Builder {
            return try Im.Other.ImheartBeat.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            let jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Im.Other.ImheartBeat {
            return try Im.Other.ImheartBeat.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Im.Other.ImheartBeat {
            return try Im.Other.ImheartBeat.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Im.Other.ImheartBeat"
        }
        override public func className() -> String {
            return "Im.Other.ImheartBeat"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Im.Other.ImheartBeat = Im.Other.ImheartBeat()
            public func getMessage() -> Im.Other.ImheartBeat {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Im.Other.ImheartBeat.Builder {
                builderResult = Im.Other.ImheartBeat()
                return self
            }
            override public func clone() throws -> Im.Other.ImheartBeat.Builder {
                return try Im.Other.ImheartBeat.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Im.Other.ImheartBeat {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Im.Other.ImheartBeat {
                let returnMe:Im.Other.ImheartBeat = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Im.Other.ImheartBeat) throws -> Im.Other.ImheartBeat.Builder {
                if other == Im.Other.ImheartBeat() {
                    return self
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Im.Other.ImheartBeat.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Im.Other.ImheartBeat.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Im.Other.ImheartBeat.Builder {
                let resultDecodedBuilder = Im.Other.ImheartBeat.Builder()
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Im.Other.ImheartBeat.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Im.Other.ImheartBeat.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Im.Other.ImheartBeat: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Im.Other.ImheartBeat> {
        var mergedArray = Array<Im.Other.ImheartBeat>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Im.Other.ImheartBeat? {
        return try Im.Other.ImheartBeat.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Im.Other.ImheartBeat {
        return try Im.Other.ImheartBeat.Builder().mergeFrom(data: data, extensionRegistry:Im.Other.ImotherRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Im.Other.ImheartBeat {
        return try Im.Other.ImheartBeat.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Im.Other.ImheartBeat {
        return try Im.Other.ImheartBeat.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Im.Other.ImheartBeat {
        return try Im.Other.ImheartBeat.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Im.Other.ImheartBeat {
        return try Im.Other.ImheartBeat.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Im.Other.ImheartBeat {
        return try Im.Other.ImheartBeat.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        return nil
    }
}
extension Im.Other.ImheartBeat.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = Im.Other.ImheartBeat
    public subscript(key: String) -> Any? {
        get { return nil }
        set { }
    }
}

// @@protoc_insertion_point(global_scope)
