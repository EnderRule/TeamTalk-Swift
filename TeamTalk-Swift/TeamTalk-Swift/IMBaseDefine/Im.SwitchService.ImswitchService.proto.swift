/// Generated by the Protocol Buffers 3.3.2 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.22
/// Source file "IM.SwitchService.proto"
/// Syntax "Proto2"

import Foundation

public extension Im {
    public struct SwitchService {}
}

public extension Im.SwitchService {
    public struct ImswitchServiceRoot {
        public static let `default` = ImswitchServiceRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    final public class Imp2PcmdMsg : GeneratedMessage {
        public typealias BuilderType = Im.SwitchService.Imp2PcmdMsg.Builder

        public static func == (lhs: Im.SwitchService.Imp2PcmdMsg, rhs: Im.SwitchService.Imp2PcmdMsg) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasFromUserId == rhs.hasFromUserId) && (!lhs.hasFromUserId || lhs.fromUserId == rhs.fromUserId)
            fieldCheck = fieldCheck && (lhs.hasToUserId == rhs.hasToUserId) && (!lhs.hasToUserId || lhs.toUserId == rhs.toUserId)
            fieldCheck = fieldCheck && (lhs.hasCmdMsgData == rhs.hasCmdMsgData) && (!lhs.hasCmdMsgData || lhs.cmdMsgData == rhs.cmdMsgData)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        ///cmd id:		0x0601
        public fileprivate(set) var fromUserId:UInt32! = nil
        public fileprivate(set) var hasFromUserId:Bool = false

        public fileprivate(set) var toUserId:UInt32! = nil
        public fileprivate(set) var hasToUserId:Bool = false

        public fileprivate(set) var cmdMsgData:String! = nil
        public fileprivate(set) var hasCmdMsgData:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            if !hasFromUserId {
                return false
            }
            if !hasToUserId {
                return false
            }
            if !hasCmdMsgData {
                return false
            }
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasFromUserId {
                try codedOutputStream.writeUInt32(fieldNumber: 1, value:fromUserId)
            }
            if hasToUserId {
                try codedOutputStream.writeUInt32(fieldNumber: 2, value:toUserId)
            }
            if hasCmdMsgData {
                try codedOutputStream.writeString(fieldNumber: 3, value:cmdMsgData)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasFromUserId {
                serialize_size += fromUserId.computeUInt32Size(fieldNumber: 1)
            }
            if hasToUserId {
                serialize_size += toUserId.computeUInt32Size(fieldNumber: 2)
            }
            if hasCmdMsgData {
                serialize_size += cmdMsgData.computeStringSize(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Im.SwitchService.Imp2PcmdMsg.Builder {
            return Im.SwitchService.Imp2PcmdMsg.classBuilder() as! Im.SwitchService.Imp2PcmdMsg.Builder
        }
        public func getBuilder() -> Im.SwitchService.Imp2PcmdMsg.Builder {
            return classBuilder() as! Im.SwitchService.Imp2PcmdMsg.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Im.SwitchService.Imp2PcmdMsg.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Im.SwitchService.Imp2PcmdMsg.Builder()
        }
        public func toBuilder() throws -> Im.SwitchService.Imp2PcmdMsg.Builder {
            return try Im.SwitchService.Imp2PcmdMsg.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Im.SwitchService.Imp2PcmdMsg) throws -> Im.SwitchService.Imp2PcmdMsg.Builder {
            return try Im.SwitchService.Imp2PcmdMsg.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasFromUserId {
                jsonMap["fromUserId"] = UInt(fromUserId)
            }
            if hasToUserId {
                jsonMap["toUserId"] = UInt(toUserId)
            }
            if hasCmdMsgData {
                jsonMap["cmdMsgData"] = cmdMsgData
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Im.SwitchService.Imp2PcmdMsg {
            return try Im.SwitchService.Imp2PcmdMsg.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Im.SwitchService.Imp2PcmdMsg {
            return try Im.SwitchService.Imp2PcmdMsg.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasFromUserId {
                output += "\(indent) fromUserId: \(fromUserId) \n"
            }
            if hasToUserId {
                output += "\(indent) toUserId: \(toUserId) \n"
            }
            if hasCmdMsgData {
                output += "\(indent) cmdMsgData: \(cmdMsgData) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasFromUserId {
                    hashCode = (hashCode &* 31) &+ fromUserId.hashValue
                }
                if hasToUserId {
                    hashCode = (hashCode &* 31) &+ toUserId.hashValue
                }
                if hasCmdMsgData {
                    hashCode = (hashCode &* 31) &+ cmdMsgData.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Im.SwitchService.Imp2PcmdMsg"
        }
        override public func className() -> String {
            return "Im.SwitchService.Imp2PcmdMsg"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Im.SwitchService.Imp2PcmdMsg = Im.SwitchService.Imp2PcmdMsg()
            public func getMessage() -> Im.SwitchService.Imp2PcmdMsg {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            ///cmd id:		0x0601
            public var fromUserId:UInt32 {
                get {
                    return builderResult.fromUserId
                }
                set (value) {
                    builderResult.hasFromUserId = true
                    builderResult.fromUserId = value
                }
            }
            public var hasFromUserId:Bool {
                get {
                    return builderResult.hasFromUserId
                }
            }
            @discardableResult
            public func setFromUserId(_ value:UInt32) -> Im.SwitchService.Imp2PcmdMsg.Builder {
                self.fromUserId = value
                return self
            }
            @discardableResult
            public func clearFromUserId() -> Im.SwitchService.Imp2PcmdMsg.Builder{
                builderResult.hasFromUserId = false
                builderResult.fromUserId = nil
                return self
            }
            public var toUserId:UInt32 {
                get {
                    return builderResult.toUserId
                }
                set (value) {
                    builderResult.hasToUserId = true
                    builderResult.toUserId = value
                }
            }
            public var hasToUserId:Bool {
                get {
                    return builderResult.hasToUserId
                }
            }
            @discardableResult
            public func setToUserId(_ value:UInt32) -> Im.SwitchService.Imp2PcmdMsg.Builder {
                self.toUserId = value
                return self
            }
            @discardableResult
            public func clearToUserId() -> Im.SwitchService.Imp2PcmdMsg.Builder{
                builderResult.hasToUserId = false
                builderResult.toUserId = nil
                return self
            }
            public var cmdMsgData:String {
                get {
                    return builderResult.cmdMsgData
                }
                set (value) {
                    builderResult.hasCmdMsgData = true
                    builderResult.cmdMsgData = value
                }
            }
            public var hasCmdMsgData:Bool {
                get {
                    return builderResult.hasCmdMsgData
                }
            }
            @discardableResult
            public func setCmdMsgData(_ value:String) -> Im.SwitchService.Imp2PcmdMsg.Builder {
                self.cmdMsgData = value
                return self
            }
            @discardableResult
            public func clearCmdMsgData() -> Im.SwitchService.Imp2PcmdMsg.Builder{
                builderResult.hasCmdMsgData = false
                builderResult.cmdMsgData = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Im.SwitchService.Imp2PcmdMsg.Builder {
                builderResult = Im.SwitchService.Imp2PcmdMsg()
                return self
            }
            override public func clone() throws -> Im.SwitchService.Imp2PcmdMsg.Builder {
                return try Im.SwitchService.Imp2PcmdMsg.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Im.SwitchService.Imp2PcmdMsg {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Im.SwitchService.Imp2PcmdMsg {
                let returnMe:Im.SwitchService.Imp2PcmdMsg = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Im.SwitchService.Imp2PcmdMsg) throws -> Im.SwitchService.Imp2PcmdMsg.Builder {
                if other == Im.SwitchService.Imp2PcmdMsg() {
                    return self
                }
                if other.hasFromUserId {
                    fromUserId = other.fromUserId
                }
                if other.hasToUserId {
                    toUserId = other.toUserId
                }
                if other.hasCmdMsgData {
                    cmdMsgData = other.cmdMsgData
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Im.SwitchService.Imp2PcmdMsg.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Im.SwitchService.Imp2PcmdMsg.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        fromUserId = try codedInputStream.readUInt32()

                    case 16:
                        toUserId = try codedInputStream.readUInt32()

                    case 26:
                        cmdMsgData = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Im.SwitchService.Imp2PcmdMsg.Builder {
                let resultDecodedBuilder = Im.SwitchService.Imp2PcmdMsg.Builder()
                if let jsonValueFromUserId = jsonMap["fromUserId"] as? UInt {
                    resultDecodedBuilder.fromUserId = UInt32(jsonValueFromUserId)
                } else if let jsonValueFromUserId = jsonMap["fromUserId"] as? String {
                    resultDecodedBuilder.fromUserId = UInt32(jsonValueFromUserId)!
                }
                if let jsonValueToUserId = jsonMap["toUserId"] as? UInt {
                    resultDecodedBuilder.toUserId = UInt32(jsonValueToUserId)
                } else if let jsonValueToUserId = jsonMap["toUserId"] as? String {
                    resultDecodedBuilder.toUserId = UInt32(jsonValueToUserId)!
                }
                if let jsonValueCmdMsgData = jsonMap["cmdMsgData"] as? String {
                    resultDecodedBuilder.cmdMsgData = jsonValueCmdMsgData
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Im.SwitchService.Imp2PcmdMsg.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Im.SwitchService.Imp2PcmdMsg.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Im.SwitchService.Imp2PcmdMsg: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Im.SwitchService.Imp2PcmdMsg> {
        var mergedArray = Array<Im.SwitchService.Imp2PcmdMsg>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Im.SwitchService.Imp2PcmdMsg? {
        return try Im.SwitchService.Imp2PcmdMsg.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Im.SwitchService.Imp2PcmdMsg {
        return try Im.SwitchService.Imp2PcmdMsg.Builder().mergeFrom(data: data, extensionRegistry:Im.SwitchService.ImswitchServiceRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Im.SwitchService.Imp2PcmdMsg {
        return try Im.SwitchService.Imp2PcmdMsg.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Im.SwitchService.Imp2PcmdMsg {
        return try Im.SwitchService.Imp2PcmdMsg.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Im.SwitchService.Imp2PcmdMsg {
        return try Im.SwitchService.Imp2PcmdMsg.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Im.SwitchService.Imp2PcmdMsg {
        return try Im.SwitchService.Imp2PcmdMsg.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Im.SwitchService.Imp2PcmdMsg {
        return try Im.SwitchService.Imp2PcmdMsg.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "fromUserId": return self.fromUserId
        case "toUserId": return self.toUserId
        case "cmdMsgData": return self.cmdMsgData
        default: return nil
        }
    }
}
extension Im.SwitchService.Imp2PcmdMsg.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = Im.SwitchService.Imp2PcmdMsg
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "fromUserId": return self.fromUserId
            case "toUserId": return self.toUserId
            case "cmdMsgData": return self.cmdMsgData
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "fromUserId":
                guard let newSubscriptValue = newSubscriptValue as? UInt32 else {
                    return
                }
                self.fromUserId = newSubscriptValue
            case "toUserId":
                guard let newSubscriptValue = newSubscriptValue as? UInt32 else {
                    return
                }
                self.toUserId = newSubscriptValue
            case "cmdMsgData":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.cmdMsgData = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
